openapi: 3.0.1
info:
  title: Swagger Reservation
  description: In this swagger you can reservate an audience on certain time
  version: 1.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Maksym637/Laba_5/1.0.0
  - url: https://reservation.swagger.io/v2
  - url: http://reservation.swagger.io/v2
tags:
  - name: Audience
    description: Choose certain audience
  - name: Reservation
    description: Access to reservation of audiences
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
paths:
  /Audience:
    post:
      tags:
        - Audience
      summary: Place an audience
      requestBody:
        description: placing a certain audience
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Audience'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Audience'
            application/json:
              schema:
                $ref: '#/components/schemas/Audience'
        '400':
          description: Invalid audience
  /Audience/{audienceId}:
    put:
      tags:
        - Audience
      summary: Update an audience
      description: Update certain audience for cetrain ID
      operationId: updateAudienceById
      parameters:
        - name: audienceId
          in: path
          description: ID of audience that needs to be updated
          required: true
          schema:
            type: integer
            example: 12
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Audience'
            application/json:
              schema:
                $ref: '#/components/schemas/Audience'
        '400':
          description: Invalid audience
    get:
      tags:
        - Audience
      summary: Find certain audience
      description: Find certain audience
      operationId: getAudienceById
      parameters:
        - name: audienceId
          in: path
          description: ID of audience that needs to be fetched
          required: true
          schema:
            type: integer
            example: 12
      responses: 
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Audience'
            application/json:
              schema:
                $ref: '#/components/schemas/Audience'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Audience not found
          content: {}
    delete:
      tags:
        - Audience
      summary: Delete certain audience by ID
      description: Delete certain audience by ID
      operationId: deleteAudiece
      parameters:
        - name: audienceId
          in: path
          description: ID of audience that needs to be deleted
          required: true
          schema:
            type: integer
            example: 12
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Audience not found
          content: {}
  /Reservation:
    post:
      tags:
        - Reservation
      summary: Place an reservation
      operationId: placeReservation
      requestBody:
        description: placing reservation of an audience
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Reservation'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Reservation'
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Invalid Reservation
          content: {}
      x-codegen-request-body-name: body
      security:
      - reservation_auth:
        - write:user
        - read:user
    put:
      tags:
        - Reservation
      summary: Update an reservation of an the audience
      operationId: updateReservation
      requestBody:
        description: updating reservation of an audience
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Reservation'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Reservation'
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Invalid Reservation
          content: {}
      security:
      - reservation_auth:
        - write:user
        - read:user
  /Reservation/{reservationId}:
    get:
      tags:
        - Reservation
      summary: Find reserv by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.        
        Other values will generated exceptions
      operationId: getReservationById
      parameters:
        - name: reservationId
          in: path
          description: ID of reservation that needs to be fetched
          required: true
          schema:
            maximum: 10
            minimum: 1
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Reservation'
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Reservation not found
          content: {}
      security:
      - reservation_auth:
        - read:user
    delete:
      tags:
        - Reservation
      summary: Delete purchase reservation by ID
      description: >-
        For valid response try integer IDs with positive integer value.        
        Negative or non-integer values will generate API errors
      operationId: deleteReservation
      parameters:
        - name: reservationId
          in: path
          description: ID of the reservation that needs to be deleted
          required: true
          schema:
            minimum: 1
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Reservation not found
          content: {}
      security:
      - reservation_auth:
        - write:user
        - read:user
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
      security:
      - reservation_auth:
        - write:user
        - read:user
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
      security:
      - reservation_auth:
        - read:user
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid user supplied
          content: {}
        '404':
          description: User not found
          content: {}
      x-codegen-request-body-name: body
      security:
      - reservation_auth:
        - write:user
        - read:user
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
      security:
      - reservation_auth:
        - write:user
        - read:user
components:
  schemas:
    Reservation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        audience:
          $ref: '#/components/schemas/Audience'
        user:
          $ref: '#/components/schemas/User'
        amountOfHours:
          type: integer
          minimum: 1
          maximum: 120
          format: int32
        dateTimeOfReservation:
          type: string
          format: date-time
        dateTimeOfEndReservation:
          type: string
          format: date-time
        status:
          type: string
          description: Reservation Status
          enum:
            - requested
            - approved
            - confirmed
      xml:
        name: Reservation
    User:
      required:
      - username
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
      xml:
        name: User
    Audience:
      required:
      - number
      type: object
      properties:
        id:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
          example: 1
      xml:
        name: Audience
  securitySchemes:
    reservation_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://reservationstore.swagger.io/oauth/dialog
          scopes:
            write:user: modify reservations in your account
            read:user: read your reservations
    api_key:
      type: apiKey
      name: api_key
      in: header